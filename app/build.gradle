apply plugin: 'com.android.application'
apply plugin: 'walle'// 美团多渠道打包 https://github.com/Meituan-Dianping/walle
apply plugin: 'io.objectbox' // after applying Android plugin
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId "com.xin.framework.xinframwork"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true


        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    // 解决.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command... java.exe'' finished with non-zero exit value 1问题
    dexOptions {
        javaMaxHeapSize "4g"
    }

    //签名
    signingConfigs {
        myConfig {
            storeFile file('sample.jks')
            storePassword '12345678'
            keyAlias 'sample'
            keyPassword '12345678'
        }

//        debug {
//            storeFile file('debug.keystore')
//        }
    }


    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            // 接口地址配置
            buildConfigField('int', 'API_PATH', "1")

            signingConfig signingConfigs.myConfig
        }

        debug {
            zipAlignEnabled true
            minifyEnabled false
            // 接口地址配置
            buildConfigField('int', 'API_PATH', "0")

        }


    }

}




dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    // modules
    compile project(path: ':fragmentation')
    // android support
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["constraint-layout"]
    compile rootProject.ext.dependencies["multidex"]
    // ANR 异常捕获
    debugCompile rootProject.ext.dependencies["blockcanary-debug"]
    releaseCompile rootProject.ext.dependencies["blockcanary-release"]
    // 内存泄露 异常捕获
    debugCompile rootProject.ext.dependencies["canary-debug"]
    releaseCompile rootProject.ext.dependencies["canary-release"]
    // bugly
    compile rootProject.ext.dependencies["bugly-crashreport"]
    compile rootProject.ext.dependencies["bugly-nativecrashreport"]
    // crash处理工具
    compile rootProject.ext.dependencies["customactivityoncrash"]
    // 美团多渠道打包 https://github.com/Meituan-Dianping/walle
    compile rootProject.ext.dependencies["meituan-walle"]
    // butterknife
    compile(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'support-annotations'
    }
    compile(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
        exclude module: 'butterknife-annotations'
    }
    compile rootProject.ext.dependencies["okhttp3"]
    // glide
    compile(rootProject.ext.dependencies["glide"]) {
        exclude module: 'support-v4'
    }
    compile rootProject.ext.dependencies["glide-loader-okhttp3"]
    annotationProcessor(rootProject.ext.dependencies["glide-compiler"]) {
        exclude module: 'jsr305'
    }

    // gson
    compile rootProject.ext.dependencies["gson"]

    compile rootProject.ext.dependencies["readystatesoftware.chuck"]
}

// 美团多渠道打包 https://github.com/Meituan-Dianping/walle
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}
